val1 = 42
demo_namespace_config{
  val1 = 42
  val2 = "akka" // ref this value as "demo_namespace_config.val2"
  nested_again{
    val3 = 90
    val1 = 1
  }
}

akka{
  loglevel = "DEBUG"
}

# time asserstions test config
specialTimedAssertionsConfig{
  akka{
    test{
      single-expect-default = 1.3s
    }
  }
}

dev{
  akka{
    loglevel = "INFO"
  }
}

interceptingLogMessages{
  akka{
    loggers = ["akka.testkit.TestEventListener"]
    test{
      filter-leeway = 5s
    }
  }
}

# router demo
routers-demo{
  akka{
    actor.deployment{
      /poolMaster2{
        router = round-robin-pool
        nr-of-instances = 5
      }
      /groupMaster2{
        router = round-robin-group
        routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5",]
      }
    }
  }
}

my-dispatcher{
  type = Dispatcher # there are multiple types of dispatchers , PinnedDispatcher , CallingThreadDispatcher
  executor = "thread-pool-executor"
  thread-pool-executor{
    fixed-pool-size = 3
  }
  throughput = 30 # number of messages a dispatcher can handle for an actor before it moves to another actor
}

dispatchers-demo{
  akka{
    actor{
      deployment{
        /rtjvm{
          dispatcher = my-dispatcher
        }
      }
    }
  }
}


mailboxes-demo{
  // step 3 - need a special dispatcher to attach this mailbox to,
  //NB the "$" on line 78, this is because SupportTicketPriorityMailbox is an internal class to static object MailBoxesOutline
  support-ticket-dispatcher{
    mailbox-type = "section6_akka_infrastructure.MailBoxesOutline$SupportTicketPriorityMailbox"
  }
  control-mailbox{
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka{
    actor{
      deployment{
        /alternativeControlAwareActor{
          mailbox = "control-mailbox"
        }
      }
    }
  }
}